//билет 36. делегирование событий
//принцип процесса всплытия: когда на эл-те происходит событие, обработчики сначала срабатывают на нем, потом на его родителе, зате выше и тд, вверх по цепочке предков 
//если на каждом из вложенных друг в друга эл-в навешано событие, то при нажатии на самый внутренний эл-т вызовет цеопчку всех событий
//чтобы узнать на каком конкретно эл-те проиозшло событие нужно ориентироваться на двух св-х объекта
//event.target - целевой элемент, на котором произошло событие, в процессе сплытия он не изменен
//event.currentTarget - текущий эл-т, до которого дошло всплытие, на нем сейчас выполняется обрабочтик, аналогичен команде this
//погружение - редко используется в реальном коде
//3 фазы прохода события: 
// фаза погружения - событие сначала идет сверху вниз
// фаза цели - событие достигло целевого(исходного) эл-та
// фаза всплытия - событие начинает всплывать
//идея делегирования состоит в том, что если есть много эл-в на которых события нужно обработать похожим образом, то вместо того, чтобы назначить обрабочтки каждому, нужно ставить один обработчик на их общего предк

const list = document.getElementById('myList');//находим родительский элемент

list.addEventListener('click', function(event) {//вешаем один обработчик на родителя
    if (event.target.tagName === 'BUTTON') {//проверяем, что кликнули именно по кнопке
        const listItem = event.target.closest('li'); //находим родительский li этой кнопки
        listItem.remove();// удаляем элемент списка
        console.log('Элемент удален!');
    }
});

// <!DOCTYPE html>
// <html>
// <head>
//     <title>Простое делегирование</title>
// </head>
// <body>
//     <ul id="myList">
//         <li>Элемент 1 <button>Удалить</button></li>
//         <li>Элемент 2 <button>Удалить</button></li>
//         <li>Элемент 3 <button>Удалить</button></li>
//     </ul>

//     <script src="script36.js"></script>
// </body>
// </html>