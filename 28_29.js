//билет 28. флаги свойств
//сво-ва объектов имеет три спец. атрибута - "флаги"
//writable - если true? сво-во можно изменить, иначе только дл чтения
//enumerable - усли true, св-во перечисляется в циклах, в притивном случае циклы игнорируют
//configurable - усли true, сво-во омжно удалить, а эти атрибуты можно изменять, инача это делать нельзя
//Обычно атрибуты скрыты, когда мы создаем св-во "обычным способом", все они имеют значение true
//метод Object.defineProperties - метод, который позволяет определять мн-во сво-в
const car = {
  brand: 'Toyota',
  year: 2020
};//создаем объект с двуми сво-ми

Object.defineProperty(car, 'year', {
  enumerable: false
});//скрываем свойство "year"

for (const key in car) {
  console.log(key); // проверяем что выводит и видит только "brand"
}
console.log(Object.keys(car)); // возвращет только "brand"


Object.defineProperty(car, 'year',{
    enumerable: false
})

//билет 29. свойства - геттеры и сеттеры
//Есть два типа свойств объекта: 
//1. свойства-данные - все св-ва, которые мы использовали до текущего момента
//2. свойства-аксессоры - по своей сути это функции, которые используютс для присвоения и получения значения, но на внешнем коде они выглядят как обычные св-ва объекта
//свойства-аксессоры представлены методами: "геттер" - для чтения и "сеттер" - для записи. Обозначаются как get и set
//геттер срабатывает когда читается, а сеттер - когда присваивается
//у аксессоров есть интересная область применения – они позволяют в любой момент взять «обычное» свойство и изменить его поведение, поменяв на геттер и сеттер
let rectangle = {
    width: 10,
    height: 5,
    // геттер для вычисления площади
    get area() {
        return this.width * this.height;
    },
    // сеттер для изменения ширины и высоты
    set dimensions(dimensions) {
        this.width = dimensions.width;
        this.height = dimensions.height;
    }
};
// используем геттер для получения площади
console.log(rectangle.area); // выведет: 50
// используем сеттер для изменения размеров
rectangle.dimensions = { width: 20, height: 10 };
console.log(rectangle.area); // выведет: 200