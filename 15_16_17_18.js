//билет 15. function declaration
//функция - некоторый блок кода, у когорого есть имя и который можно вызвать через данное имя
//удобна, так как позволяет многократно использовать один и тот же код, не переписывая его
//если функция возвращает значение, то в теле функции нужно использовать return и после указываеся возвращаемое значение 
//return можно использовать если функция не возвращает рез-т, просто не указываем никакое значение
//return может находится в лбом место тела функии, как только выполнение доходит до этого места функция останавливается и значение возвращается 
//глобальная переменная доступна везде, а если переменная объявлена в теле функции, то она является локальной и доступна только в теле этой функции
//если есть одноименная переменная внутри функции, тогда она перекрывает внешнюю

const minGrade = 3.5; // переменная, которая сообщает о том, что мин пбалл должен быть 3.5
const excellentGrade = 4.8; // если балл равен 4.8, то ученик получает статуст "отличник"

function calculateAverage(grades) {
  let sum = 0;//переменная для сохранения суммы
  for (let grade of grades) {//проходим по массиву
    sum += grade;//сохраняем новое значение
  }
  return sum / grades.length;//возвращаем значение, которое равно сумме оценок деленное на количество оценок, то есть средний балл
}

function getStudentStatus(averageGrade) {
  if (averageGrade >= excellentGrade) {
    return "Отличник";//если ср балл больше 4.8, то выводим "отличник"
  } else if (averageGrade >= minGrade) {
    return "Хорошист";//если средний балл выше 3.5 то выводим "хорошист"
  } else {
    return "Троечник";//в обратном случае - "троечник"
  }
}

function printStudentReport(studentName, grades) {
  const average = calculateAverage(grades);
  const status = getStudentStatus(average);//функция принимает два параметра: имя и массива оценок
  //первая переменная вызывает функцию со средним баллом, а вторая - статус студента
  
  console.log(`Студент: ${studentName}`);//выводим имя студента
  console.log(`Оценки: ${grades}`);//все его оценки
  console.log(`Средний балл: ${average.toFixed(2)}`);//средний балл с округлением до двух знаков после запятой
  console.log(`Статус: ${status}`);//статус студента
}//функция для вывода всей информации о студенте 
const ivanGrades = [4, 5, 5, 4, 5];//оценки для ивана
const mariaGrades = [3, 4, 3, 4, 3];//оценки для марии
const petrGrades = [2, 3, 2, 3, 2];//оценки для петра

printStudentReport("Иван", ivanGrades);
printStudentReport("Мария", mariaGrades);
printStudentReport("Петр", petrGrades);



//билет 16. function expression
//функция - значение, поэтому они мб присвоены, скопированы или объявлены в другом месте кода
// в данном случае функция создается и явно присваивается переменной, как любое другое значение 
//при создании таким образом, мы получаем что функция - значение и с ним можно выполнить различные операции
const nod=function(a, b) {//создаем функцию с двумя параметрами 
  let max=a<b? b:a; //если а меньше b, то вернем b, в обратном случае вернем а, то есть находим более из двух чисел
  for (let i=max; i>1; i--){
    if (b%i==0 && a%i==0){//проверяем делятся ли оба числа без остатка на i
      return i//если да то вернем имя как нод(наибольший общий делитель)
    }
  }
}

const nok=function(a, b) {
    if (a === 0 || b === 0) return 0; //если одно из чисел равно 0, то нок (наименьшее общее кратное) равно 0
    return (a * b) / nod(a, b);//используем формула нок
}
console.log(nok(2, 6));


//билет 17. callback-функции
//простыми словами  -  это функция, которая должна быть выполнена после того,, как другая функцич выполнилась
//любая функция, которая передается как аргумент - callback-функция
function callback(){
    return 2025-2006//возвращаем возрат человека родившегося в 2006 году
}
function rez(callback){
    console.log("Возраст человека родившегося в 2006 году",callback())//принимаем как аргумент - другую функцию

}
rez(callback)


function summa(a,b,c){
    return a+b+c//возвращает сумму трех чисел
}
function summa1(summa){
    console.log("Сумма", summa)//принимаем как значение аргумента прошлую функцию
}

summa1(summa(2,3,4))

//билет 18. стрелочные функции
//если один аргумент, то круглые скобки вокруг параметров можно опустить
//если нет аргументов, указываем пустые круглые скобки
//если внутри срелочной функции нужно выполеить несколько инструкций, то их нужно заключить в фигурные скобки и использовать return внутри них, как в обычной функции
const sum = (a, b) => a + b;// стрелочная функция с двумя параметрами, возвращает сумму чисел

const subtract = a => b => a - b;// с одним параметром, скобки не нужны 

const multiply = (a, b) => {
  return a * b;
}; //с фигурными скобками так как возвращаем значение

const divide = (a, b) => a / b;

console.log('сумма', sum(2, 3)); 
console.log('разность', subtract(5)(2)); 
console.log('произведение', multiply(4, 3)); 
console.log('частное', divide(10, 2)); //

const isEven = num => num % 2 === 0;//проверка на четность, один параметр без скобок

console.log('4 четное?', isEven(4)); // выведет тру
console.log('5 четное?', isEven(5)); // выведет фолс

const greet = () => console.log('Калькулятор');// без параметров

greet(); //выводим калькулятор